matching = {"0001101": 0, "0011001": 1, "0010011": 2,
            "0111101": 3, "0100011": 4, "0110001": 5,
            "0101111": 6, "0111011": 7, "0110111": 8, "0001011": 9}

def maching_result(init):
    result = []  # 결과를 담을 리스트 초기화
    for code in init:
        decoded = "".join(map(str, code))  # 코드를 문자열로 변환
        result.append(matching.get(decoded, -1))  # 딕셔너리에서 매칭 결과 가져오기
    print(result)  # 결과 출력

t = int(input())
for tc in range(1, t + 1):
    n, m = map(int, input().split())
    pass_cord = [list(map(int, input())) for _ in range(n)]

    # 바코드의 마지막 1을 찾아 열 위치를 구합니다.
    for r in range(n):
        for c in range(m - 1, -1, -1):  # c 범위 수정
            if pass_cord[r][c] == 1:
                sr, sc = r, c
                break

    pass_list = pass_cord[sr][sc - 55:sc + 1]

    l_pass = len(pass_list)
    mouem = []
    for i in range(0, l_pass, 7):
        pass_word = pass_list[i:i + 7]
        mouem.append(pass_word)

    maching_result(mouem)  # 함수 호출 후 결과 출력 수정

'''
1
10 70
0000000000000000000000000000000000000000000000000000000000000000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000
'''
